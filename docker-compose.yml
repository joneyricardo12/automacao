version: '3.9'

networks:
  cmm_network:
    driver: bridge

services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=cmm_network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --providers.file.filename=/etc/traefik/dynamic.yml
      - --providers.file.watch=true
      - --log.level=INFO
      - --accesslog=true
      - --global.sendAnonymousUsage=false
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/docker/certificados/cmm_am_gov_br_inter.crt:/etc/ssl/certs/server.crt:ro
      - /opt/docker/certificados/cmm_am_gov_br.key:/etc/ssl/certs/server.key:ro
      - /opt/docker/traefik-config/dynamic.yml:/etc/traefik/dynamic.yml:ro
    networks:
      - cmm_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.tls=true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:8
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=sqlite
      - DB_SQLITE_DATABASE=/data/database.sqlite
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${ADMIN_EMAIL}
      - N8N_BASIC_AUTH_PASSWORD=${ADMIN_PASSWORD}
      - N8N_HOST=${N8N_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://${N8N_DOMAIN}/
      - NODE_ENV=production
      - GENERIC_TIMEZONE=${TZ}
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      - N8N_SECURE_COOKIE=true
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n_data:/data
    networks:
      - cmm_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls=true
      - traefik.http.services.n8n.loadbalancer.server.port=5678
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_EMAIL}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN}
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SERVER_HTTP_PORT=3030
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - TZ=${TZ}
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_logs:/var/log/grafana
      - grafana_plugins:/var/lib/grafana/plugins
    networks:
      - cmm_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=3030
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3030/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===== CHATWOOT COM CREDENCIAIS UNIFICADAS =====
  chatwoot_postgres:
    image: postgres:17.5
    container_name: chatwoot_postgres
    restart: unless-stopped
    volumes:
      - chatwoot_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=chatwoot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatwoot -d chatwoot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  chatwoot_redis:
    image: redis:8
    container_name: chatwoot_redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - chatwoot_redis_data:/data
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  chatwoot_rails:
    image: chatwoot/chatwoot:latest
    container_name: chatwoot_rails
    restart: unless-stopped
    depends_on:
      chatwoot_postgres:
        condition: service_healthy
      chatwoot_redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - FRONTEND_URL=https://${CHATWOOT_DOMAIN}
      - FORCE_SSL=true
      - POSTGRES_HOST=chatwoot_postgres
      - POSTGRES_USERNAME=chatwoot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=chatwoot
      - REDIS_URL=redis://:${REDIS_PASSWORD}@chatwoot_redis:6379
      - SECRET_KEY_BASE=${CHATWOOT_SECRET_KEY_BASE}
      - RAILS_MASTER_KEY=${CHATWOOT_MASTER_KEY}
      - MAILER_SENDER_EMAIL=${ADMIN_EMAIL}
      - SMTP_DOMAIN=cmm.am.gov.br
      - TZ=${TZ}
      - ENABLE_ACCOUNT_SIGNUP=true
      - CHATWOOT_INSTALLATION_ENV=docker
      - SUPER_ADMIN_EMAIL=${ADMIN_EMAIL}
      - SUPER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_SERVE_STATIC_FILES=true
    volumes:
      - chatwoot_data:/app/storage
    networks:
      - cmm_network
    entrypoint: |
      sh -c '
        echo "üîÑ Aguardando PostgreSQL e Redis..."
        
        # Aguarda PostgreSQL
        echo "‚è≥ Testando PostgreSQL..."
        for i in $(seq 1 60); do
          if pg_isready -h chatwoot_postgres -U chatwoot >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL conectado!"
            break
          fi
          echo "‚è≥ Tentativa $$i/60 - Aguardando PostgreSQL..."
          sleep 5
        done
        
        # Aguarda Redis
        echo "‚è≥ Testando Redis..."
        for i in $(seq 1 30); do
          if redis-cli -h chatwoot_redis -a "${REDIS_PASSWORD}" ping >/dev/null 2>&1; then
            echo "‚úÖ Redis conectado!"
            break
          fi
          echo "‚è≥ Tentativa $$i/30 - Aguardando Redis..."
          sleep 3
        done
        
        echo "üîÑ Preparando banco de dados..."
        bundle exec rails db:chatwoot_prepare || bundle exec rails db:migrate || echo "‚ö†Ô∏è Falha na prepara√ß√£o do banco"
        
        echo "‚úÖ Iniciando servidor Rails..."
        bundle exec rails s -p 3000 -b 0.0.0.0
      '
    labels:
      - traefik.enable=true
      - traefik.http.routers.chatwoot.rule=Host(`${CHATWOOT_DOMAIN}`)
      - traefik.http.routers.chatwoot.entrypoints=websecure
      - traefik.http.routers.chatwoot.tls=true
      - traefik.http.services.chatwoot.loadbalancer.server.port=3000
      - traefik.http.middlewares.chatwoot-headers.headers.customrequestheaders.X-Forwarded-Proto=https
      - traefik.http.middlewares.chatwoot-headers.headers.customrequestheaders.X-Forwarded-Ssl=on
      - traefik.http.routers.chatwoot.middlewares=chatwoot-headers
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  chatwoot_sidekiq:
    image: chatwoot/chatwoot:latest
    container_name: chatwoot_sidekiq
    restart: unless-stopped
    depends_on:
      chatwoot_postgres:
        condition: service_healthy
      chatwoot_redis:
        condition: service_healthy
      chatwoot_rails:
        condition: service_started
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - FRONTEND_URL=https://${CHATWOOT_DOMAIN}
      - FORCE_SSL=true
      - POSTGRES_HOST=chatwoot_postgres
      - POSTGRES_USERNAME=chatwoot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=chatwoot
      - REDIS_URL=redis://:${REDIS_PASSWORD}@chatwoot_redis:6379
      - SECRET_KEY_BASE=${CHATWOOT_SECRET_KEY_BASE}
      - RAILS_MASTER_KEY=${CHATWOOT_MASTER_KEY}
      - MAILER_SENDER_EMAIL=${ADMIN_EMAIL}
      - SMTP_DOMAIN=cmm.am.gov.br
      - TZ=${TZ}
      - ENABLE_ACCOUNT_SIGNUP=true
      - RAILS_LOG_TO_STDOUT=true
    volumes:
      - chatwoot_data:/app/storage
    networks:
      - cmm_network
    entrypoint: |
      sh -c '
        echo "‚è≥ Aguardando Rails preparar banco..."
        sleep 90
        echo "üöÄ Iniciando Sidekiq..."
        bundle exec sidekiq -C config/sidekiq.yml
      '
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  n8n_data:
    driver: local
  grafana_data:
    driver: local
  grafana_logs:
    driver: local
  grafana_plugins:
    driver: local
  redis_data:
    driver: local
  chatwoot_postgres_data:
    driver: local
  chatwoot_redis_data:
    driver: local
  chatwoot_data:
    driver: local